import asyncio
from datetime import datetime

from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, BufferedInputFile

from forms.vpn import MyVPN, BuyVPN
from repository import SubscriptionRepository, ConfigRepository, ServerRepository, UserRepository

from keyboards import MyVPNKeyboard, TariffKeyboard

from tools import api

router = Router()

@router.callback_query(MyVPN.subscription_id)
async def send_subscription(callback: CallbackQuery, state: FSMContext):
    if callback.data != 'cancel':
        subscription_id = int(callback.data)

        subscription = SubscriptionRepository.get(subscription_id)
        config_id = subscription.config_id
        config = ConfigRepository.get(config_id)
        server_id = config.server_id
        server = ServerRepository.get(server_id)

        ip_adress = f'http://{server.address}:{server.port}'

        text = f"""
<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {subscription.expires_on.strftime('%d.%m.%Y')}</b>
<b>–°—Ç—Ä–∞–Ω–∞: {server.country} [{server.id}]</b>
<b>–°–µ—Ä–≤–µ—Ä: {'üü¢ —Ä–∞–±–æ—Ç–∞–µ—Ç' if api.ping(ip_adress) else 'üî¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}</b>
<b>–ö–æ–Ω—Ñ–∏–≥: {'üü¢ —Ä–∞–±–æ—Ç–∞–µ—Ç' if not config.disabled else 'üî¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}</b>
<b>–ò–º—è –∫–æ–Ω—Ñ–∏–≥–∞: {config.name}</b>

<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>
"""
        await callback.message.delete()
        await callback.message.answer(text=text, reply_markup=MyVPNKeyboard.markup, parse_mode=ParseMode.HTML)
        await state.update_data(subscription_id=subscription_id)
        await state.set_state(MyVPN.action)


    else:
        await callback.message.delete()
        await state.clear()

@router.callback_query(MyVPN.action)
async def action(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    if callback.data != 'cancel':
        if callback.data == 'extend':
            tariff_keyboard = TariffKeyboard(UserRepository.get_from_chat_id(callback.from_user.id), extend=True)

            await state.set_state(BuyVPN.tariff)
            await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å',
                                          reply_markup=tariff_keyboard.markup)

        if callback.data == 'recreate':
            data = await state.get_data()

            subscription = SubscriptionRepository.get(int(data['subscription_id']))

            if datetime.now() > subscription.expires_on:
                await state.clear()
                await callback.message.answer('–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–¥–ª–∏—Ç–µ –µ—ë')

            else:
                msg = await callback.message.answer('–û–∂–∏–¥–∞–π—Ç–µ...')

                config_id = subscription.config_id
                config = ConfigRepository.get(subscription.config_id)

                server_id = config.server_id
                server = ServerRepository.get(server_id)

                ip_address = f'http://{server.address}:{server.port}'

                if api.ping(ip_address):

                    api.delete_config(config_name=config.name, ip_address=ip_address)
                    await asyncio.sleep(1)
                    result = api.create_config(config_name=config.name, ip_address=ip_address)

                    file = result[config.name]

                    ConfigRepository.update(config_id, file=file)
                    await msg.delete()

                    await callback.message.answer('–ö–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω:')
                    await callback.message.answer(f'```{file}```', parse_mode=ParseMode.MARKDOWN)
                    await callback.message.answer_photo(api.generate_qr(file))

                else:
                    await msg.delete()
                    await state.clear()
                    await callback.message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')

        if callback.data == 'get_config':
            data = await state.get_data()

            subscription = SubscriptionRepository.get(int(data['subscription_id']))
            config = ConfigRepository.get(subscription.config_id)

            await callback.message.answer('–ö–æ–Ω—Ñ–∏–≥:')
            file = BufferedInputFile(str.encode(config.file), 'YossVPN.conf')
            await callback.message.answer_document(file)

            await callback.message.answer_photo(api.generate_qr(config.file))
    else:
        await state.clear()

