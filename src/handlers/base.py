from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message

from config import settings
from forms.register import RegisterForm
from forms.vpn import BuyVPN, MyVPN
from keyboards import BuyOrExtend, Choose_Instruction, Contact, Menu, ServerKeyboard
from repository import (
    ConfigRepository,
    ServerRepository,
    SubscriptionRepository,
    TariffRepository,
    TransactionRepository,
    UserRepository,
)
from texts import instructions_for_PC, instructions_for_phone
from tools.bot_mode import BotMode

router = Router()


def get_tariff_text(id: int):
    tariff = TariffRepository.get(id)
    text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {tariff.name} –∑–∞ {tariff.price} —Ä—É–±–ª–µ–π\n"
    text += f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {tariff.price} —Ä—É–±–ª–µ–π –Ω–∞ `{settings.phone_number}` –ø–æ –°–ë–ü\n"
    text += f"–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å [—Å—Å—ã–ª–∫–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã]({settings.pay_url})\n"
    text += f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –û–ø–ª–∞—Ç—É"\n\n'
    text += f"–ü–æ—Å–ª–µ –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –≤–∞–º –æ—Ç–ø—Ä–∞–≤—è—Ç —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è VPN"

    return text


async def check_register(message: Message, state: FSMContext):
    if not UserRepository.check_registration(message.chat.id):
        await message.answer(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è"',
            reply_markup=Contact.markup,
        )
        await state.set_state(RegisterForm.phone)
        return False
    return True


@router.message(F.text, Command("start"))
async def start(message: Message, state: FSMContext):
    text = """
*Yoss VPN —ç—Ç–æ:*

üöÄ –í—ã—Å–æ–∫–æ—Å–æ—Ä–æ—Å—Ç–Ω–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π VPN —Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º —Ç—Ä–∞—Ñ–∏–∫–æ–º –∏ –Ω–∏–∑–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏

üì± –î–æ—Å—Ç—É–ø –∫ Instagram, Discord, YouTube, TikTok, 4k –∫–æ–Ω—Ç–µ–Ω—Ç—É, Twitter –∏ –¥—Ä—É–≥–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º

üïµÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

üí≥ –û–ø–ª–∞—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–º —á–µ—Ä–µ–∑ –°–ë–ü

üôã‚Äç‚ôÇÔ∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–º–æ–∂–µ—Ç –≤ —á–∞—Ç–µ

üåç –õ–æ–∫–∞—Ü–∏–∏: üá≥üá±

–¶–µ–Ω–∞: 150‚ÇΩ/ –º–µ—Å (–æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ)

*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è
2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É–π –≤–∞—Å —Å–µ—Ä–≤–µ—Ä üåê
3. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É–π –≤–∞—Å —Ç–∞—Ä–∏—Ñ üí∞
4. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—á—ë—Ç üí≥
5. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã ‚è≥
6. –ü–æ–ª—É—á–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ üìÑ
"""
    await message.answer(text, reply_markup=Menu.markup, parse_mode=ParseMode.MARKDOWN)

    await check_register(message, state)


@router.message(F.text, Command("help"))
async def help(message: Message, state: FSMContext):
    await message.answer(
        "–î–ª—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @Kapchonka77", reply_markup=Menu.markup
    )


@router.message(F.text.lower() == "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ‚ùî")
async def instruction(message: Message, state: FSMContext):
    await message.answer("–î–ª—è –∫–∞–∫–æ–π –ø–ª–æ—Ç—Ñ–æ—Ä–º—ã?", reply_markup=Choose_Instruction.markup)


@router.message(F.text.lower() == "windows/macos/linux")
async def PC(message: Message, state: FSMContext):
    await message.answer(instructions_for_PC, reply_markup=Menu.markup)


@router.message(F.text.lower() == "android/ios")
async def phone(message: Message, state: FSMContext):
    await message.answer(instructions_for_phone, reply_markup=Menu.markup)


@router.message(F.text.lower() == "–∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–ª–∏—Ç—å vpn üåê")
async def buy_vpn(message: Message, state: FSMContext):
    if await check_register(message, state):
        mode = BotMode()
        if mode.buy_action:
            user = UserRepository.get_from_chat_id(message.from_user.id)
            transactions = TransactionRepository.get_from_user_id(user.id)
            if len(transactions) > 0:
                await message.answer(
                    "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –ø—Ä–æ–≤–µ—Ä–∫–∏",
                    reply_markup=Menu.markup,
                )
            else:
                subscriptions_list = SubscriptionRepository.get_from_user_id(user.id)
                if len(subscriptions_list) == 0:
                    server_keyboard = ServerKeyboard()
                    await state.set_state(BuyVPN.server_id)
                    await message.answer(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É–π –≤–∞—Å —Å–µ—Ä–≤–µ—Ä",
                        reply_markup=server_keyboard.markup,
                    )
                else:
                    await state.set_state(BuyVPN.buy_or_extend)
                    await message.answer(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=BuyOrExtend.markup
                    )
        else:
            await message.answer(
                "–í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ",
                reply_markup=Menu.markup,
            )


@router.message(F.text.lower() == "–º–æ–π vpn üìÇ")
async def my_vpn(message: Message, state: FSMContext):
    if await check_register(message, state):
        mode = BotMode()
        if mode.my_vpn_action:
            user = UserRepository.get_from_chat_id(message.from_user.id)

            subscriptions_list = SubscriptionRepository.get_from_user_id(user.id)

            if not len(subscriptions_list) == 0:
                kb = []

                for subscription in subscriptions_list:
                    config = ConfigRepository.get(subscription.config_id)
                    server = ServerRepository.get(config.server_id)

                    kb.append(
                        [
                            InlineKeyboardButton(
                                text=f'{server.country} [{server.id}] –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è: {subscription.expires_on.strftime("%d.%m.%Y")}',
                                callback_data=f"{subscription.id}",
                            )
                        ]
                    )

                kb.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])

                markup = InlineKeyboardMarkup(inline_keyboard=kb)

                await state.set_state(MyVPN.subscription_id)
                await message.answer(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:", reply_markup=markup
                )

            else:
                await message.answer(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.", reply_markup=Menu.markup
                )
        else:
            await message.answer(
                "–í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ",
                reply_markup=Menu.markup,
            )
